// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
                let sourceString = source as! String
                for formatter in formatters {
                    if let date = formatter.dateFromString(sourceString) {
                        return date
                    }
                }
                fatalError("formatter failed to parse \(sourceString)")
            } 

			// Decoder for [JobAdSections]
            Decoders.addDecoder(clazz: [JobAdSections].self) { (source: AnyObject) -> [JobAdSections] in
                return Decoders.decode(clazz: [JobAdSections].self, source: source)
            }
			// Decoder for JobAdSections
            Decoders.addDecoder(clazz: JobAdSections.self) { (source: AnyObject) -> JobAdSections in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobAdSections()
                instance.additionalInformation = Decoders.decodeOptional(clazz: JobAdSection.self, source: sourceDictionary["additionalInformation"])
                instance.companyDescription = Decoders.decodeOptional(clazz: JobAdSection.self, source: sourceDictionary["companyDescription"])
                instance.jobDescription = Decoders.decodeOptional(clazz: JobAdSection.self, source: sourceDictionary["jobDescription"])
                instance.qualifications = Decoders.decodeOptional(clazz: JobAdSection.self, source: sourceDictionary["qualifications"])
                return instance
            }
			

			// Decoder for [CandidateWebDetails]
            Decoders.addDecoder(clazz: [CandidateWebDetails].self) { (source: AnyObject) -> [CandidateWebDetails] in
                return Decoders.decode(clazz: [CandidateWebDetails].self, source: source)
            }
			// Decoder for CandidateWebDetails
            Decoders.addDecoder(clazz: CandidateWebDetails.self) { (source: AnyObject) -> CandidateWebDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CandidateWebDetails()
                instance.facebook = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["facebook"])
                instance.linkedin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["linkedin"])
                instance.skype = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["skype"])
                instance.twitter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["twitter"])
                instance.website = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["website"])
                return instance
            }
			

			// Decoder for [Action]
            Decoders.addDecoder(clazz: [Action].self) { (source: AnyObject) -> [Action] in
                return Decoders.decode(clazz: [Action].self, source: source)
            }
			// Decoder for Action
            Decoders.addDecoder(clazz: Action.self) { (source: AnyObject) -> Action in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Action()
                instance.method = (sourceDictionary["method"] as? String).map { Action.Method(rawValue: $0)! } 
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }
			

			// Decoder for [CandidateAssignment]
            Decoders.addDecoder(clazz: [CandidateAssignment].self) { (source: AnyObject) -> [CandidateAssignment] in
                return Decoders.decode(clazz: [CandidateAssignment].self, source: source)
            }
			// Decoder for CandidateAssignment
            Decoders.addDecoder(clazz: CandidateAssignment.self) { (source: AnyObject) -> CandidateAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CandidateAssignment()
                instance.actions = Decoders.decodeOptional(clazz: Actions.self, source: sourceDictionary["actions"])
                instance.job = Decoders.decodeOptional(clazz: CandidateJob.self, source: sourceDictionary["job"])
                instance.reasonOfRejection = Decoders.decodeOptional(clazz: DictionaryItem.self, source: sourceDictionary["reasonOfRejection"])
                instance.source = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source"])
                instance.status = (sourceDictionary["status"] as? String).map { CandidateAssignment.Status(rawValue: $0)! } 
                instance.subStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subStatus"])
                return instance
            }
			

			// Decoder for [HiringTeamMemberList]
            Decoders.addDecoder(clazz: [HiringTeamMemberList].self) { (source: AnyObject) -> [HiringTeamMemberList] in
                return Decoders.decode(clazz: [HiringTeamMemberList].self, source: source)
            }
			// Decoder for HiringTeamMemberList
            Decoders.addDecoder(clazz: HiringTeamMemberList.self) { (source: AnyObject) -> HiringTeamMemberList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HiringTeamMemberList()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.totalFound = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalFound"])
                return instance
            }
			

			// Decoder for [JSONPatch]
            Decoders.addDecoder(clazz: [JSONPatch].self) { (source: AnyObject) -> [JSONPatch] in
                return Decoders.decode(clazz: [JSONPatch].self, source: source)
            }
			// Decoder for JSONPatch
            Decoders.addDecoder(clazz: JSONPatch.self) { (source: AnyObject) -> JSONPatch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JSONPatch()
                return instance
            }
			

			// Decoder for [PublicationListItem]
            Decoders.addDecoder(clazz: [PublicationListItem].self) { (source: AnyObject) -> [PublicationListItem] in
                return Decoders.decode(clazz: [PublicationListItem].self, source: source)
            }
			// Decoder for PublicationListItem
            Decoders.addDecoder(clazz: PublicationListItem.self) { (source: AnyObject) -> PublicationListItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PublicationListItem()
                instance.publishedOn = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["publishedOn"])
                instance.sourceName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sourceName"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.unpublishedOn = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["unpublishedOn"])
                return instance
            }
			

			// Decoder for [CandidateJob]
            Decoders.addDecoder(clazz: [CandidateJob].self) { (source: AnyObject) -> [CandidateJob] in
                return Decoders.decode(clazz: [CandidateJob].self, source: source)
            }
			// Decoder for CandidateJob
            Decoders.addDecoder(clazz: CandidateJob.self) { (source: AnyObject) -> CandidateJob in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CandidateJob()
                instance.actions = Decoders.decodeOptional(clazz: Actions.self, source: sourceDictionary["actions"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.startsOn = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startsOn"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                return instance
            }
			

			// Decoder for [JobDetails]
            Decoders.addDecoder(clazz: [JobDetails].self) { (source: AnyObject) -> [JobDetails] in
                return Decoders.decode(clazz: [JobDetails].self, source: source)
            }
			// Decoder for JobDetails
            Decoders.addDecoder(clazz: JobDetails.self) { (source: AnyObject) -> JobDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobDetails()
                instance.actions = Decoders.decodeOptional(clazz: Actions.self, source: sourceDictionary["actions"])
                instance.compensation = Decoders.decodeOptional(clazz: Compensation.self, source: sourceDictionary["compensation"])
                instance.createdOn = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdOn"])
                instance.creator = Decoders.decodeOptional(clazz: JobCreator.self, source: sourceDictionary["creator"])
                instance.department = Decoders.decodeOptional(clazz: JobDepartment.self, source: sourceDictionary["department"])
                instance.eeoCategory = Decoders.decodeOptional(clazz: DictionaryItem.self, source: sourceDictionary["eeoCategory"])
                instance.experienceLevel = Decoders.decodeOptional(clazz: DictionaryItem.self, source: sourceDictionary["experienceLevel"])
                instance.function = Decoders.decodeOptional(clazz: DictionaryItem.self, source: sourceDictionary["function"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.industry = Decoders.decodeOptional(clazz: DictionaryItem.self, source: sourceDictionary["industry"])
                instance.jobAd = Decoders.decodeOptional(clazz: JobAd.self, source: sourceDictionary["jobAd"])
                instance.location = Decoders.decodeOptional(clazz: Location.self, source: sourceDictionary["location"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.refNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["refNumber"])
                instance.status = (sourceDictionary["status"] as? String).map { JobDetails.Status(rawValue: $0)! } 
                instance.targetHiringDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["targetHiringDate"])
                instance.template = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["template"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.typeOfEmployment = Decoders.decodeOptional(clazz: DictionaryItem.self, source: sourceDictionary["typeOfEmployment"])
                instance.updatedOn = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updatedOn"])
                return instance
            }
			

			// Decoder for [Compensation]
            Decoders.addDecoder(clazz: [Compensation].self) { (source: AnyObject) -> [Compensation] in
                return Decoders.decode(clazz: [Compensation].self, source: source)
            }
			// Decoder for Compensation
            Decoders.addDecoder(clazz: Compensation.self) { (source: AnyObject) -> Compensation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Compensation()
                instance.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"])
                instance.max = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["max"])
                instance.min = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["min"])
                return instance
            }
			

			// Decoder for [CandidateEducation]
            Decoders.addDecoder(clazz: [CandidateEducation].self) { (source: AnyObject) -> [CandidateEducation] in
                return Decoders.decode(clazz: [CandidateEducation].self, source: source)
            }
			// Decoder for CandidateEducation
            Decoders.addDecoder(clazz: CandidateEducation.self) { (source: AnyObject) -> CandidateEducation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CandidateEducation()
                instance.current = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["current"])
                instance.degree = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["degree"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.endDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endDate"])
                instance.institution = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["institution"])
                instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"])
                instance.major = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["major"])
                instance.startDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startDate"])
                return instance
            }
			

			// Decoder for [JobList]
            Decoders.addDecoder(clazz: [JobList].self) { (source: AnyObject) -> [JobList] in
                return Decoders.decode(clazz: [JobList].self, source: source)
            }
			// Decoder for JobList
            Decoders.addDecoder(clazz: JobList.self) { (source: AnyObject) -> JobList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobList()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.limit = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["limit"])
                instance.offset = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["offset"])
                instance.totalFound = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalFound"])
                return instance
            }
			

			// Decoder for [Job]
            Decoders.addDecoder(clazz: [Job].self) { (source: AnyObject) -> [Job] in
                return Decoders.decode(clazz: [Job].self, source: source)
            }
			// Decoder for Job
            Decoders.addDecoder(clazz: Job.self) { (source: AnyObject) -> Job in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Job()
                instance.compensation = Decoders.decodeOptional(clazz: Compensation.self, source: sourceDictionary["compensation"])
                instance.department = Decoders.decodeOptional(clazz: JobDepartment.self, source: sourceDictionary["department"])
                instance.eeoCategory = Decoders.decodeOptional(clazz: DictionaryItem.self, source: sourceDictionary["eeoCategory"])
                instance.experienceLevel = Decoders.decodeOptional(clazz: DictionaryItem.self, source: sourceDictionary["experienceLevel"])
                instance.function = Decoders.decodeOptional(clazz: DictionaryItem.self, source: sourceDictionary["function"])
                instance.industry = Decoders.decodeOptional(clazz: DictionaryItem.self, source: sourceDictionary["industry"])
                instance.jobAd = Decoders.decodeOptional(clazz: JobAd.self, source: sourceDictionary["jobAd"])
                instance.location = Decoders.decodeOptional(clazz: Location.self, source: sourceDictionary["location"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.refNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["refNumber"])
                instance.targetHiringDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["targetHiringDate"])
                instance.template = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["template"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.typeOfEmployment = Decoders.decodeOptional(clazz: DictionaryItem.self, source: sourceDictionary["typeOfEmployment"])
                return instance
            }
			

			// Decoder for [JobDepartment]
            Decoders.addDecoder(clazz: [JobDepartment].self) { (source: AnyObject) -> [JobDepartment] in
                return Decoders.decode(clazz: [JobDepartment].self, source: source)
            }
			// Decoder for JobDepartment
            Decoders.addDecoder(clazz: JobDepartment.self) { (source: AnyObject) -> JobDepartment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobDepartment()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [JobProperty]
            Decoders.addDecoder(clazz: [JobProperty].self) { (source: AnyObject) -> [JobProperty] in
                return Decoders.decode(clazz: [JobProperty].self, source: source)
            }
			// Decoder for JobProperty
            Decoders.addDecoder(clazz: JobProperty.self) { (source: AnyObject) -> JobProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobProperty()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                instance.value = Decoders.decodeOptional(clazz: JobPropertyValue.self, source: sourceDictionary["value"])
                return instance
            }
			

			// Decoder for [Candidate]
            Decoders.addDecoder(clazz: [Candidate].self) { (source: AnyObject) -> [Candidate] in
                return Decoders.decode(clazz: [Candidate].self, source: source)
            }
			// Decoder for Candidate
            Decoders.addDecoder(clazz: Candidate.self) { (source: AnyObject) -> Candidate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Candidate()
                instance.education = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["education"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.experience = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["experience"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstName"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastName"])
                instance.location = Decoders.decodeOptional(clazz: CandidateLocation.self, source: sourceDictionary["location"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phoneNumber"])
                instance.sourceDetails = Decoders.decodeOptional(clazz: CandidateSource.self, source: sourceDictionary["sourceDetails"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.web = Decoders.decodeOptional(clazz: CandidateWebDetails.self, source: sourceDictionary["web"])
                return instance
            }
			

			// Decoder for [CandidateDetails]
            Decoders.addDecoder(clazz: [CandidateDetails].self) { (source: AnyObject) -> [CandidateDetails] in
                return Decoders.decode(clazz: [CandidateDetails].self, source: source)
            }
			// Decoder for CandidateDetails
            Decoders.addDecoder(clazz: CandidateDetails.self) { (source: AnyObject) -> CandidateDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CandidateDetails()
                instance.actions = Decoders.decodeOptional(clazz: Actions.self, source: sourceDictionary["actions"])
                instance.averageRating = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["averageRating"])
                instance.createdOn = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdOn"])
                instance.education = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["education"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.experience = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["experience"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstName"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.Swaggerinternal = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Swaggerinternal"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastName"])
                instance.location = Decoders.decodeOptional(clazz: CandidateLocation.self, source: sourceDictionary["location"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phoneNumber"])
                instance.primaryAssignment = Decoders.decodeOptional(clazz: CandidateAssignment.self, source: sourceDictionary["primaryAssignment"])
                instance.secondaryAssignments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["secondaryAssignments"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.updatedOn = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updatedOn"])
                instance.web = Decoders.decodeOptional(clazz: CandidateWebDetails.self, source: sourceDictionary["web"])
                return instance
            }
			

			// Decoder for [CandidateExperience]
            Decoders.addDecoder(clazz: [CandidateExperience].self) { (source: AnyObject) -> [CandidateExperience] in
                return Decoders.decode(clazz: [CandidateExperience].self, source: source)
            }
			// Decoder for CandidateExperience
            Decoders.addDecoder(clazz: CandidateExperience.self) { (source: AnyObject) -> CandidateExperience in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CandidateExperience()
                instance.company = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["company"])
                instance.current = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["current"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.endDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endDate"])
                instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"])
                instance.startDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startDate"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                return instance
            }
			

			// Decoder for [JobListElem]
            Decoders.addDecoder(clazz: [JobListElem].self) { (source: AnyObject) -> [JobListElem] in
                return Decoders.decode(clazz: [JobListElem].self, source: source)
            }
			// Decoder for JobListElem
            Decoders.addDecoder(clazz: JobListElem.self) { (source: AnyObject) -> JobListElem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobListElem()
                instance.actions = Decoders.decodeOptional(clazz: Actions.self, source: sourceDictionary["actions"])
                instance.createdOn = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdOn"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.location = Decoders.decodeOptional(clazz: Location.self, source: sourceDictionary["location"])
                instance.refNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["refNumber"])
                instance.status = (sourceDictionary["status"] as? String).map { JobListElem.Status(rawValue: $0)! } 
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.updatedOn = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updatedOn"])
                return instance
            }
			

			// Decoder for [Actions]
            Decoders.addDecoder(clazz: [Actions].self) { (source: AnyObject) -> [Actions] in
                return Decoders.decode(clazz: [Actions].self, source: source)
            }
			// Decoder for Actions
            Decoders.addDecoder(clazz: Actions.self) { (source: AnyObject) -> Actions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Actions()
                return instance
            }
			

			// Decoder for [JobAd]
            Decoders.addDecoder(clazz: [JobAd].self) { (source: AnyObject) -> [JobAd] in
                return Decoders.decode(clazz: [JobAd].self, source: source)
            }
			// Decoder for JobAd
            Decoders.addDecoder(clazz: JobAd.self) { (source: AnyObject) -> JobAd in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobAd()
                instance.sections = Decoders.decodeOptional(clazz: JobAdSections.self, source: sourceDictionary["sections"])
                return instance
            }
			

			// Decoder for [CandidateLocation]
            Decoders.addDecoder(clazz: [CandidateLocation].self) { (source: AnyObject) -> [CandidateLocation] in
                return Decoders.decode(clazz: [CandidateLocation].self, source: source)
            }
			// Decoder for CandidateLocation
            Decoders.addDecoder(clazz: CandidateLocation.self) { (source: AnyObject) -> CandidateLocation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CandidateLocation()
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"])
                instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postalCode"])
                instance.region = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["region"])
                instance.regionCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["regionCode"])
                return instance
            }
			

			// Decoder for [Publication]
            Decoders.addDecoder(clazz: [Publication].self) { (source: AnyObject) -> [Publication] in
                return Decoders.decode(clazz: [Publication].self, source: source)
            }
			// Decoder for Publication
            Decoders.addDecoder(clazz: Publication.self) { (source: AnyObject) -> Publication in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Publication()
                instance.aggregators = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["aggregators"])
                return instance
            }
			

			// Decoder for [JobCreator]
            Decoders.addDecoder(clazz: [JobCreator].self) { (source: AnyObject) -> [JobCreator] in
                return Decoders.decode(clazz: [JobCreator].self, source: source)
            }
			// Decoder for JobCreator
            Decoders.addDecoder(clazz: JobCreator.self) { (source: AnyObject) -> JobCreator in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobCreator()
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstName"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastName"])
                return instance
            }
			

			// Decoder for [JobNote]
            Decoders.addDecoder(clazz: [JobNote].self) { (source: AnyObject) -> [JobNote] in
                return Decoders.decode(clazz: [JobNote].self, source: source)
            }
			// Decoder for JobNote
            Decoders.addDecoder(clazz: JobNote.self) { (source: AnyObject) -> JobNote in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobNote()
                instance.content = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content"])
                return instance
            }
			

			// Decoder for [DictionaryItem]
            Decoders.addDecoder(clazz: [DictionaryItem].self) { (source: AnyObject) -> [DictionaryItem] in
                return Decoders.decode(clazz: [DictionaryItem].self, source: source)
            }
			// Decoder for DictionaryItem
            Decoders.addDecoder(clazz: DictionaryItem.self) { (source: AnyObject) -> DictionaryItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DictionaryItem()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [HiringTeamMember]
            Decoders.addDecoder(clazz: [HiringTeamMember].self) { (source: AnyObject) -> [HiringTeamMember] in
                return Decoders.decode(clazz: [HiringTeamMember].self, source: source)
            }
			// Decoder for HiringTeamMember
            Decoders.addDecoder(clazz: HiringTeamMember.self) { (source: AnyObject) -> HiringTeamMember in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HiringTeamMember()
                instance.actions = Decoders.decodeOptional(clazz: Actions.self, source: sourceDictionary["actions"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.role = (sourceDictionary["role"] as? String).map { HiringTeamMember.Role(rawValue: $0)! } 
                return instance
            }
			

			// Decoder for [JobPropertyValue]
            Decoders.addDecoder(clazz: [JobPropertyValue].self) { (source: AnyObject) -> [JobPropertyValue] in
                return Decoders.decode(clazz: [JobPropertyValue].self, source: source)
            }
			// Decoder for JobPropertyValue
            Decoders.addDecoder(clazz: JobPropertyValue.self) { (source: AnyObject) -> JobPropertyValue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobPropertyValue()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [PublicationList]
            Decoders.addDecoder(clazz: [PublicationList].self) { (source: AnyObject) -> [PublicationList] in
                return Decoders.decode(clazz: [PublicationList].self, source: source)
            }
			// Decoder for PublicationList
            Decoders.addDecoder(clazz: PublicationList.self) { (source: AnyObject) -> PublicationList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PublicationList()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                return instance
            }
			

			// Decoder for [CandidateSource]
            Decoders.addDecoder(clazz: [CandidateSource].self) { (source: AnyObject) -> [CandidateSource] in
                return Decoders.decode(clazz: [CandidateSource].self, source: source)
            }
			// Decoder for CandidateSource
            Decoders.addDecoder(clazz: CandidateSource.self) { (source: AnyObject) -> CandidateSource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CandidateSource()
                instance.sourceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sourceId"])
                instance.sourceTypeId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sourceTypeId"])
                return instance
            }
			

			// Decoder for [JobAdSection]
            Decoders.addDecoder(clazz: [JobAdSection].self) { (source: AnyObject) -> [JobAdSection] in
                return Decoders.decode(clazz: [JobAdSection].self, source: source)
            }
			// Decoder for JobAdSection
            Decoders.addDecoder(clazz: JobAdSection.self) { (source: AnyObject) -> JobAdSection in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobAdSection()
                instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                return instance
            }
			

			// Decoder for [JobStatusHistoryList]
            Decoders.addDecoder(clazz: [JobStatusHistoryList].self) { (source: AnyObject) -> [JobStatusHistoryList] in
                return Decoders.decode(clazz: [JobStatusHistoryList].self, source: source)
            }
			// Decoder for JobStatusHistoryList
            Decoders.addDecoder(clazz: JobStatusHistoryList.self) { (source: AnyObject) -> JobStatusHistoryList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobStatusHistoryList()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.totalFound = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalFound"])
                return instance
            }
			

			// Decoder for [JobStatusHistoryListElem]
            Decoders.addDecoder(clazz: [JobStatusHistoryListElem].self) { (source: AnyObject) -> [JobStatusHistoryListElem] in
                return Decoders.decode(clazz: [JobStatusHistoryListElem].self, source: source)
            }
			// Decoder for JobStatusHistoryListElem
            Decoders.addDecoder(clazz: JobStatusHistoryListElem.self) { (source: AnyObject) -> JobStatusHistoryListElem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobStatusHistoryListElem()
                instance.actions = Decoders.decodeOptional(clazz: Actions.self, source: sourceDictionary["actions"])
                instance.changedOn = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["changedOn"])
                instance.status = (sourceDictionary["status"] as? String).map { JobStatusHistoryListElem.Status(rawValue: $0)! } 
                return instance
            }
			

			// Decoder for [Location]
            Decoders.addDecoder(clazz: [Location].self) { (source: AnyObject) -> [Location] in
                return Decoders.decode(clazz: [Location].self, source: source)
            }
			// Decoder for Location
            Decoders.addDecoder(clazz: Location.self) { (source: AnyObject) -> Location in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Location()
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"])
                instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postalCode"])
                instance.region = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["region"])
                instance.regionCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["regionCode"])
                return instance
            }
			
        }
    }
}
