//
// CandidatesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

extension SmartRecruitersClientAPI {
    
    public class CandidatesAPI: APIBase {
    
        /**
         
         Find candidates by params
         
         - GET /candidates
         - Find candidates by params. Returns a list of candidates
         - examples: [{contentType=application/json, example={
  "offset" : "",
  "limit" : "",
  "totalFound" : "",
  "content" : [ {
    "lastName" : "aeiou",
    "internal" : true,
    "primaryAssignment" : {
      "reasonOfRejection" : {
        "id" : "aeiou",
        "label" : "aeiou"
      },
      "source" : "aeiou",
      "job" : {
        "id" : "aeiou",
        "title" : "aeiou",
        "actions" : "",
        "startsOn" : "2016-01-27T15:58:16.882+0000"
      },
      "actions" : "",
      "subStatus" : "aeiou",
      "status" : "aeiou"
    },
    "updatedOn" : "2016-01-27T15:58:16.883+0000",
    "createdOn" : "2016-01-27T15:58:16.882+0000",
    "tags" : [ "aeiou" ],
    "firstName" : "aeiou",
    "averageRating" : 1.3579000000000001069366817318950779736042022705078125,
    "location" : {
      "country" : "aeiou",
      "regionCode" : "aeiou",
      "address" : "aeiou",
      "city" : "aeiou",
      "countryCode" : "aeiou",
      "postalCode" : "aeiou",
      "region" : "aeiou"
    },
    "secondaryAssignments" : [ "" ],
    "id" : "aeiou",
    "actions" : {
      "_action" : {
        "method" : "aeiou",
        "url" : "aeiou"
      }
    },
    "email" : "aeiou"
  } ]
}}]
         
         - parameter q: (query) keyword search on all candidate fields; case insensitive; e.g. java developer
         - parameter limit: (query) number of elements to return. max value is 100
         - parameter offset: (query) number of elements to skip while processing result
         - parameter jobId: (query) job filter to display candidates who applied for a job [id]; can be used repeatedly;
         - parameter location: (query) location keyword search which looks up a string in a candidate’s location data; can be used repeatedly; case insensitive; e.g. Krakow
         - parameter averageRating: (query) average rating filter to display candidates with a specific average rating (integer); can be used repeatedly; e.g. 4
         - parameter status: (query) candidate’s status filter in a context of a job; can be used repeatedly; case insensitive; e.g. Hired
         - parameter subStatus: (query) candidate’s sub-status filter in a context of a job. Works only in a correlation with a set value for the \&quot;status\&quot; field.
         - parameter tag: (query) tag assigned to a candidate; can be used repeatedly; case insensitive; e.g. fluent english
         - parameter updatedAfter: (query) ISO8601-formatted time boundaries for the candidate update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ
         - parameter onboardingStatus: (query) candidate&#39;s onboarding status

         - returns: RequestBuilder<CandidateList> 
         */
        public class func findCandidates(q q: String?, limit: Int?, offset: Int?, jobId: String?, location: String?, averageRating: Int?, status: String?, subStatus: String?, tag: String?, updatedAfter: String?, onboardingStatus: String?) -> RequestBuilder<CandidateList> {
            let path = "/candidates"
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "q": q,
                "limit": limit,
                "offset": offset,
                "jobId": jobId,
                "location": location,
                "averageRating": averageRating,
                "status": status,
                "subStatus": subStatus,
                "tag": tag,
                "updatedAfter": updatedAfter,
                "onboardingStatus": onboardingStatus
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<CandidateList>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Parse a resume, create a candidate and assign to a Talent Pool.
         
         - POST /candidates
         - Parse a resume, create a candidate and assign to a Talent Pool. Returns a created Candidate object.
         - examples: [{contentType=application/json, example={
  "lastName" : "aeiou",
  "internal" : true,
  "education" : [ {
    "institution" : "aeiou",
    "current" : true,
    "major" : "aeiou",
    "endDate" : "aeiou",
    "degree" : "aeiou",
    "description" : "aeiou",
    "location" : "aeiou",
    "startDate" : "aeiou"
  } ],
  "primaryAssignment" : {
    "reasonOfRejection" : {
      "id" : "aeiou",
      "label" : "aeiou"
    },
    "source" : "aeiou",
    "job" : {
      "id" : "aeiou",
      "title" : "aeiou",
      "actions" : "",
      "startsOn" : "2016-01-27T15:58:16.914+0000"
    },
    "actions" : "",
    "subStatus" : "aeiou",
    "status" : "aeiou"
  },
  "updatedOn" : "2016-01-27T15:58:16.914+0000",
  "experience" : [ {
    "current" : true,
    "endDate" : "aeiou",
    "description" : "aeiou",
    "company" : "aeiou",
    "location" : "aeiou",
    "title" : "aeiou",
    "startDate" : "aeiou"
  } ],
  "createdOn" : "2016-01-27T15:58:16.914+0000",
  "tags" : [ "aeiou" ],
  "firstName" : "aeiou",
  "phoneNumber" : "aeiou",
  "web" : {
    "skype" : "aeiou",
    "twitter" : "aeiou",
    "website" : "aeiou",
    "facebook" : "aeiou",
    "linkedin" : "aeiou"
  },
  "averageRating" : 1.3579000000000001069366817318950779736042022705078125,
  "location" : {
    "country" : "aeiou",
    "regionCode" : "aeiou",
    "address" : "aeiou",
    "city" : "aeiou",
    "countryCode" : "aeiou",
    "postalCode" : "aeiou",
    "region" : "aeiou"
  },
  "secondaryAssignments" : [ "" ],
  "id" : "aeiou",
  "actions" : {
    "_action" : {
      "method" : "aeiou",
      "url" : "aeiou"
    }
  },
  "email" : "aeiou"
}}]
         
         - parameter file: (form) The resume file to parse.

         - returns: RequestBuilder<CandidateDetails> 
         */
        public class func parseCVandAddCandidate(file file: NSURL) -> RequestBuilder<CandidateDetails> {
            let path = "/candidates"
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "file": file
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<CandidateDetails>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Get details of a Candidate with given Id
         
         - GET /candidates/{id}
         - Get details of a Candidate with given Id. Returns a Candidate object
         - examples: [{contentType=application/json, example={
  "lastName" : "aeiou",
  "internal" : true,
  "education" : [ {
    "institution" : "aeiou",
    "current" : true,
    "major" : "aeiou",
    "endDate" : "aeiou",
    "degree" : "aeiou",
    "description" : "aeiou",
    "location" : "aeiou",
    "startDate" : "aeiou"
  } ],
  "primaryAssignment" : {
    "reasonOfRejection" : {
      "id" : "aeiou",
      "label" : "aeiou"
    },
    "source" : "aeiou",
    "job" : {
      "id" : "aeiou",
      "title" : "aeiou",
      "actions" : "",
      "startsOn" : "2016-01-27T15:58:16.919+0000"
    },
    "actions" : "",
    "subStatus" : "aeiou",
    "status" : "aeiou"
  },
  "updatedOn" : "2016-01-27T15:58:16.919+0000",
  "experience" : [ {
    "current" : true,
    "endDate" : "aeiou",
    "description" : "aeiou",
    "company" : "aeiou",
    "location" : "aeiou",
    "title" : "aeiou",
    "startDate" : "aeiou"
  } ],
  "createdOn" : "2016-01-27T15:58:16.919+0000",
  "tags" : [ "aeiou" ],
  "firstName" : "aeiou",
  "phoneNumber" : "aeiou",
  "web" : {
    "skype" : "aeiou",
    "twitter" : "aeiou",
    "website" : "aeiou",
    "facebook" : "aeiou",
    "linkedin" : "aeiou"
  },
  "averageRating" : 1.3579000000000001069366817318950779736042022705078125,
  "location" : {
    "country" : "aeiou",
    "regionCode" : "aeiou",
    "address" : "aeiou",
    "city" : "aeiou",
    "countryCode" : "aeiou",
    "postalCode" : "aeiou",
    "region" : "aeiou"
  },
  "secondaryAssignments" : [ "" ],
  "id" : "aeiou",
  "actions" : {
    "_action" : {
      "method" : "aeiou",
      "url" : "aeiou"
    }
  },
  "email" : "aeiou"
}}]
         
         - parameter id: (path) Identifier of a Candidate

         - returns: RequestBuilder<CandidateDetails> 
         */
        public class func getCandidate(id id: String) -> RequestBuilder<CandidateDetails> {
            var path = "/candidates/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<CandidateDetails>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Get list of attachments for a candidate with a given id.
         
         - GET /candidates/{id}/attachments
         - Get list of attachments for a candidate with a given id. Returns a list of Candidate Attachment objects.
         - examples: [{contentType=application/json, example={
  "totalFound" : "",
  "content" : [ {
    "name" : "aeiou",
    "id" : "aeiou",
    "type" : "aeiou",
    "actions" : {
      "_action" : {
        "method" : "aeiou",
        "url" : "aeiou"
      }
    },
    "contentType" : "aeiou"
  } ]
}}]
         
         - parameter id: (path) Identifier of a candidate for which we want to retrieve a list of attachments

         - returns: RequestBuilder<CandidateAttachments> 
         */
        public class func getCandidateAttachments(id id: String) -> RequestBuilder<CandidateAttachments> {
            var path = "/candidates/{id}/attachments"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<CandidateAttachments>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Attach files to a candidate’s profile.
         
         - POST /candidates/{id}/attachments
         - Attach files to a candidate’s profile. Returns instance of the CandidateAttachment object
         - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "id" : "aeiou",
  "type" : "aeiou",
  "actions" : {
    "_action" : {
      "method" : "aeiou",
      "url" : "aeiou"
    }
  },
  "contentType" : "aeiou"
}}]
         
         - parameter id: (path) Identifier of a candidate for which we want to upload an attachment
         - parameter file: (form) The file to upload.
         - parameter attachmentType: (form) Type of attachment you want to upload.

         - returns: RequestBuilder<CandidateAttachment> 
         */
        public class func addCandidateAttachment(id id: String, file: NSURL, attachmentType: String?) -> RequestBuilder<CandidateAttachment> {
            var path = "/candidates/{id}/attachments"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "attachmentType": attachmentType,
                "file": file
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<CandidateAttachment>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Get a candidate's attachment.
         
         - GET /candidates/{id}/attachments/{attachmentId}
         - Get a candidate's attachment. Returns a candidate's attachment file.
         
         - parameter id: (path) Identifier of a candidate for which we want to download an attachment
         - parameter attachmentId: (path) Identifier of an attachment which you want to get

         - returns: RequestBuilder<Void> 
         */
        public class func getCandidateAttachment(id id: String, attachmentId: String) -> RequestBuilder<Void> {
            var path = "/candidates/{id}/attachments/{attachmentId}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            path = path.stringByReplacingOccurrencesOfString("{attachmentId}", withString: "\(attachmentId)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Void>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Get a candidate's offers
         
         - GET /candidates/{id}/jobs/{jobId}/offers
         - Get a candidate's offers
         - examples: [{contentType=application/json, example={
  "offset" : "",
  "limit" : "",
  "totalFound" : "",
  "content" : [ {
    "id" : "aeiou",
    "updatedOn" : "2016-01-27T15:58:16.929+0000",
    "actions" : {
      "_action" : {
        "method" : "aeiou",
        "url" : "aeiou"
      }
    },
    "createdOn" : "2016-01-27T15:58:16.929+0000",
    "properties" : { },
    "status" : "aeiou"
  } ]
}}]
         
         - parameter id: (path) Identifier of a Candidate
         - parameter jobId: (path) Identifier of a Job

         - returns: RequestBuilder<OfferList> 
         */
        public class func getOffers(id id: String, jobId: String) -> RequestBuilder<OfferList> {
            var path = "/candidates/{id}/jobs/{jobId}/offers"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            path = path.stringByReplacingOccurrencesOfString("{jobId}", withString: "\(jobId)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<OfferList>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Get a candidate's offer
         
         - GET /candidates/{id}/jobs/{jobId}/offers/{offerId}
         - Get a candidate's offer
         - examples: [{contentType=application/json, example={
  "id" : "aeiou",
  "updatedOn" : "2016-01-27T15:58:16.930+0000",
  "actions" : {
    "_action" : {
      "method" : "aeiou",
      "url" : "aeiou"
    }
  },
  "createdOn" : "2016-01-27T15:58:16.930+0000",
  "properties" : { },
  "status" : "aeiou"
}}]
         
         - parameter id: (path) Identifier of a Candidate
         - parameter jobId: (path) Identifier of a Job
         - parameter offerId: (path) Identifier of a Offer

         - returns: RequestBuilder<Offer> 
         */
        public class func getOffer(id id: String, jobId: String, offerId: String) -> RequestBuilder<Offer> {
            var path = "/candidates/{id}/jobs/{jobId}/offers/{offerId}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            path = path.stringByReplacingOccurrencesOfString("{jobId}", withString: "\(jobId)", options: .LiteralSearch, range: nil)
            path = path.stringByReplacingOccurrencesOfString("{offerId}", withString: "\(offerId)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Offer>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Get Onboarding Status for a candidate associated with given job
         
         - GET /candidates/{id}/jobs/{jobId}/onboardingStatus
         - Get Onboarding Status for a candidate associated with given job.
         - examples: [{contentType=application/json, example={
  "onboardingStatus" : "aeiou"
}}]
         
         - parameter id: (path) Identifier of a Candidate
         - parameter jobId: (path) Identifier of a Job

         - returns: RequestBuilder<OnboardingStatusInfo> 
         */
        public class func getOnboardingStatusForJob(id id: String, jobId: String) -> RequestBuilder<OnboardingStatusInfo> {
            var path = "/candidates/{id}/jobs/{jobId}/onboardingStatus"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            path = path.stringByReplacingOccurrencesOfString("{jobId}", withString: "\(jobId)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<OnboardingStatusInfo>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Sets Onboarding Status for a candidate associated with given job
         
         - PUT /candidates/{id}/jobs/{jobId}/onboardingStatus
         - Sets Onboarding Status for a candidate associated with given job.
         - examples: [{contentType=application/json, example={
  "onboardingStatus" : "aeiou"
}}]
         
         - parameter id: (path) Identifier of a Candidate
         - parameter jobId: (path) Identifier of a Job
         - parameter onboardingStatusInfo: (body) Onboarding status input value.

         - returns: RequestBuilder<OnboardingStatusInfo> 
         */
        public class func setOnboardingStatusForJob(id id: String, jobId: String, onboardingStatusInfo: OnboardingStatusInfo?) -> RequestBuilder<OnboardingStatusInfo> {
            var path = "/candidates/{id}/jobs/{jobId}/onboardingStatus"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            path = path.stringByReplacingOccurrencesOfString("{jobId}", withString: "\(jobId)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let parameters = onboardingStatusInfo?.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<OnboardingStatusInfo>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Get candidate fields' values for a candidate's job
         
         - GET /candidates/{id}/jobs/{jobId}/properties
         - Returns candidate fields' values for a candidates' job.<br /><br />Endpoint returns <pre lang=\"javascript\">{}</pre> when there is no value set for a field.
         - examples: [{contentType=application/json, example={
  "content" : [ {
    "id" : "aeiou",
    "label" : "aeiou",
    "type" : "aeiou",
    "actions" : {
      "_action" : {
        "method" : "aeiou",
        "url" : "aeiou"
      }
    },
    "value" : "aeiou"
  } ]
}}]
         
         - parameter id: (path) Identifier of a Candidate
         - parameter jobId: (path) Identifier of a Job
         - parameter context: (query) context for candidate properties to display

         - returns: RequestBuilder<CandidateProperties> 
         */
        public class func getCandidateJobsProperties(id id: String, jobId: String, context: String?) -> RequestBuilder<CandidateProperties> {
            var path = "/candidates/{id}/jobs/{jobId}/properties"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            path = path.stringByReplacingOccurrencesOfString("{jobId}", withString: "\(jobId)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "context": context
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<CandidateProperties>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Add/update candidate property value
         
         - PUT /candidates/{id}/jobs/{jobId}/properties/{propertyId}
         - Add (if doesn't exist) or update (if already exists) a candidate property value for the candidates' job. <br/><br/>Below you can find a list of value examples, dependent on different candidate property types.<ul>    <li><b>TEXT</b><br/>        <pre lang=\"javascript\">{ \"value\": \"Example text\" }        </pre>    </li>    <li><b>SINGLE_SELECT</b><br/>        <pre lang=\"javascript\">{ \"value\": \"f6fe768f-b5e6-4794-9938-c2f42ab0a572\" }        </pre>        Value has to be a valid property value id    </li>    <li><b>NUMBER, PERCENT</b><br/>        <pre lang=\"javascript\">{ \"value\": 42 }        </pre>    </li>    <li><b>USER</b><br/>        <pre lang=\"javascript\">{ \"value\": \"50fe861de4b00265edec6775\" }        </pre>        Value has to be a valid user id    </li>    <li><b>DATE</b><br/>        <pre lang=\"javascript\">{ \"value\": \"2015-11-17T23:00:00.000Z\" }        </pre>    </li>    <li><b>BOOLEAN</b><br/>        <pre lang=\"javascript\">{ \"value\": true }        </pre>    </li>    <li><b>CURRENCY</b><br/>        <pre lang=\"javascript\">{  \"value\":{\n       \"code\": \"GBP\", \n       \"value\": 23232 \n   }\n}        </pre>    </li></ul><br />To reset a value for any of the above types, please pass <br /><pre lang=\"javascript\">{}</pre>
         
         - parameter id: (path) Identifier of a Candidate
         - parameter jobId: (path) Identifier of a Job
         - parameter propertyId: (path) Identifier of a Candidate Property
         - parameter candidatePropertyInputValue: (body) Input value of the candidate property.

         - returns: RequestBuilder<Void> 
         */
        public class func updateCandidateJobsProperties(id id: String, jobId: String, propertyId: String, candidatePropertyInputValue: CandidatePropertyInputValue?) -> RequestBuilder<Void> {
            var path = "/candidates/{id}/jobs/{jobId}/properties/{propertyId}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            path = path.stringByReplacingOccurrencesOfString("{jobId}", withString: "\(jobId)", options: .LiteralSearch, range: nil)
            path = path.stringByReplacingOccurrencesOfString("{propertyId}", withString: "\(propertyId)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let parameters = candidatePropertyInputValue?.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Void>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Update a candidate's status
         
         - PUT /candidates/{id}/jobs/{jobId}/status
         - Update a candidate's status
         
         - parameter id: (path) Identifier of a Candidate
         - parameter jobId: (path) Identifier of a Job
         - parameter candidateStatus: (body) Candidate Status to be set

         - returns: RequestBuilder<Void> 
         */
        public class func updateStatus(id id: String, jobId: String, candidateStatus: CandidateStatus?) -> RequestBuilder<Void> {
            var path = "/candidates/{id}/jobs/{jobId}/status"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            path = path.stringByReplacingOccurrencesOfString("{jobId}", withString: "\(jobId)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let parameters = candidateStatus?.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Void>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Get Onboarding Status for a candidate
         
         - GET /candidates/{id}/onboardingStatus
         - Get Onboarding Status for a candidate.
         - examples: [{contentType=application/json, example={
  "onboardingStatus" : "aeiou"
}}]
         
         - parameter id: (path) Identifier of a Candidate

         - returns: RequestBuilder<OnboardingStatusInfo> 
         */
        public class func getOnboardingStatus(id id: String) -> RequestBuilder<OnboardingStatusInfo> {
            var path = "/candidates/{id}/onboardingStatus"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<OnboardingStatusInfo>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Set Onboarding Status for a candidate
         
         - PUT /candidates/{id}/onboardingStatus
         - Set Onboarding Status for a candidate. Accepts one of the following values: READY_TO_ONBOARD, ONBOARDING_SUCCESSFUL, ONBOARDING_FAILED.
         
         - parameter id: (path) Identifier of a Candidate
         - parameter onboardingStatusInfo: (body) Onboarding status input value.

         - returns: RequestBuilder<Void> 
         */
        public class func setOnboardingStatus(id id: String, onboardingStatusInfo: OnboardingStatusInfo?) -> RequestBuilder<Void> {
            var path = "/candidates/{id}/onboardingStatus"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let parameters = onboardingStatusInfo?.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Void>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Get candidate fields' values for a candidate
         
         - GET /candidates/{id}/properties
         - Returns candidate fields' values for a candidate.<br /><br />Endpoint returns <pre lang=\"javascript\">{}</pre> when there is no value set for a field.
         - examples: [{contentType=application/json, example={
  "content" : [ {
    "id" : "aeiou",
    "label" : "aeiou",
    "type" : "aeiou",
    "actions" : {
      "_action" : {
        "method" : "aeiou",
        "url" : "aeiou"
      }
    },
    "value" : "aeiou"
  } ]
}}]
         
         - parameter id: (path) Identifier of a Candidate
         - parameter context: (query) context for candidate properties to display

         - returns: RequestBuilder<CandidateProperties> 
         */
        public class func getCandidateProperties(id id: String, context: String?) -> RequestBuilder<CandidateProperties> {
            var path = "/candidates/{id}/properties"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "context": context
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<CandidateProperties>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Add/update candidate property value
         
         - PUT /candidates/{id}/properties/{propertyId}
         - Add (if doesn't exist) or update (if already exists) a candidate property value for the candidate. <br/><br/>Below you can find a list of value examples, dependent on different candidate property types.<ul>    <li><b>TEXT</b><br/>        <pre lang=\"javascript\">{ \"value\": \"Example text\" }        </pre>    </li>    <li><b>SINGLE_SELECT</b><br/>        <pre lang=\"javascript\">{ \"value\": \"f6fe768f-b5e6-4794-9938-c2f42ab0a572\" }        </pre>        Value has to be a valid property value id    </li>    <li><b>NUMBER, PERCENT</b><br/>        <pre lang=\"javascript\">{ \"value\": 42 }        </pre>    </li>    <li><b>USER</b><br/>        <pre lang=\"javascript\">{ \"value\": \"50fe861de4b00265edec6775\" }        </pre>        Value has to be a valid user id    </li>    <li><b>DATE</b><br/>        <pre lang=\"javascript\">{ \"value\": \"2015-11-17T23:00:00.000Z\" }        </pre>    </li>    <li><b>BOOLEAN</b><br/>        <pre lang=\"javascript\">{ \"value\": true }        </pre>    </li>    <li><b>CURRENCY</b><br/>        <pre lang=\"javascript\">{  \"value\":{\n       \"code\": \"GBP\", \n       \"value\": 23232 \n   }\n}        </pre>    </li></ul><br />To reset a value for any of the above types, please pass <br /><pre lang=\"javascript\">{}</pre>
         
         - parameter id: (path) Identifier of a Candidate
         - parameter propertyId: (path) Identifier of a Candidate Property
         - parameter candidatePropertyInputValue: (body) Input value of the candidate property.

         - returns: RequestBuilder<Void> 
         */
        public class func updateCandidateProperties(id id: String, propertyId: String, candidatePropertyInputValue: CandidatePropertyInputValue?) -> RequestBuilder<Void> {
            var path = "/candidates/{id}/properties/{propertyId}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            path = path.stringByReplacingOccurrencesOfString("{propertyId}", withString: "\(propertyId)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let parameters = candidatePropertyInputValue?.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Void>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Update a candidate's status on primary assignment
         
         - PUT /candidates/{id}/status
         - Update a candidate's status on primary assignment
         
         - parameter id: (path) Identifier of a Candidate
         - parameter candidateStatus: (body) Candidate Status to be set

         - returns: RequestBuilder<Void> 
         */
        public class func updatePrimaryStatus(id id: String, candidateStatus: CandidateStatus?) -> RequestBuilder<Void> {
            var path = "/candidates/{id}/status"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let parameters = candidateStatus?.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Void>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Status History
         
         - GET /candidates/{id}/status/history
         - Status History
         - examples: [{contentType=application/json, example={
  "totalFound" : "",
  "content" : [ {
    "actions" : {
      "_action" : {
        "method" : "aeiou",
        "url" : "aeiou"
      }
    },
    "changedOn" : "2016-01-27T15:58:16.942+0000",
    "subStatus" : "aeiou",
    "status" : "aeiou"
  } ]
}}]
         
         - parameter id: (path) Identifier of a Candidate

         - returns: RequestBuilder<CandidateStatusHistoryList> 
         */
        public class func getStatusHistory(id id: String) -> RequestBuilder<CandidateStatusHistoryList> {
            var path = "/candidates/{id}/status/history"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SmartRecruitersClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<CandidateStatusHistoryList>.Type = SmartRecruitersClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
    }
}
